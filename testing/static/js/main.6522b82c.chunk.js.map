{"version":3,"sources":["components/profile/Profile.js","components/profile/ProfilePage.js","components/form/FormPage.js","components/register/RegisterPage.js","components/button/ButtonWithProps.js","components/button/ButtonWithChild.js","components/button/ButtonPage.js","components/theme/ThemePage.js","components/cities/AwesomeComponent.js","components/cities/CitiesPage.js","App.js","serviceWorker.js","index.js"],"names":["Profile","this","props","profileInfo","img","name","age","hobbies","src","alt","map","element","index","key","React","Component","ProfilePage","profiles","className","profile","FormPage","handleChange","event","setState","target","id","value","onSubmit","state","firstName","lastName","console","log","placeholder","onChange","onClick","RegisterPage","onUserSubmit","ButtonWithProps","handleClick","informButtonPage","buttonText","customStyle","style","ButtonWithChild","children","ButtonPage","handleButtonClicks","text","backgroundColor","ThemePage","submitColorChange","onColorChange","color","history","push","type","override","css","AwesomeComponent","loading","sizeUnit","size","CitiesPage","cities","fetch","then","response","json","columns","Header","accessor","data","App","handleColorChange","localStorage","setItem","handleUserSubmit","getItem","to","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6522b82c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Profile extends React.Component {\r\n    render() {\r\n        const { img, name, age, hobbies } = this.props.profileInfo;\r\n        \r\n        return (\r\n            <div>\r\n                <p>     </p>\r\n                <img src={img} alt=\"Profile\" />\r\n                <div>Name: {name}</div>\r\n                <div>Age: {age} </div>\r\n                <div>Hobbies: </div>\r\n                {\r\n                    hobbies.map((element, index) => {\r\n                        return (<p key={\"hobby\" + index} >{element}</p>);\r\n                    })\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Profile;\r\n","import React from \"react\";\r\nimport Profile from './Profile';\r\n\r\nexport default class ProfilePage extends React.Component {\r\n    render() {\r\n        const hobbies = [\"Knitting\", \"Gaming\", \"Bird Watching\"];\r\n\r\n        const profileOne = {\r\n            name: \"hello123456\",\r\n            age: \"61\",\r\n            img: \"http://placeimg.com/640/480/any\",\r\n            hobbies: hobbies\r\n        };\r\n    \r\n        const profileTwo = {\r\n          name: \"Anders\",\r\n          age: \"6\",\r\n          img: \"http://placeimg.com/640/480/any\",\r\n          hobbies: hobbies\r\n      };\r\n    \r\n        const profiles = [profileOne, profileTwo];\r\n\r\n        return (\r\n            <div className=\"App App-header\">\r\n            {\r\n            profiles.map((profile, index) => {\r\n                return <Profile key={\"profile\" + index} profileInfo={profile} />\r\n            })\r\n            }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n","import React from \"react\";\r\n\r\nexport default class FormPage extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            firstName: \"\", \r\n            lastName: \"\"\r\n        }\r\n    }\r\n\r\n    handleChange = (event)=> {\r\n        this.setState({[event.target.id]: event.target.value})\r\n        // console.log(event)\r\n    }\r\n\r\n    onSubmit = ()=> {\r\n        const { firstName, lastName } = this.state;\r\n        console.log(`Your first name is: ${firstName} and last name is: ${lastName}` );\r\n    }\r\n\r\n    render() {\r\n        \r\n        console.log(this.state)\r\n        const { firstName, lastName } = this.state\r\n\r\n        return(\r\n            <div>\r\n\r\n                <h1>FORM</h1>\r\n                {/* <form> */}\r\n                    {/* <input id=\"firstName\" placeholder=\"First Name\" onChange={this.handleChange} ></input>\r\n                    <input id=\"lastName\" placeholder=\"Last Name\" onChange={this.handleChange} ></input> */}\r\n                    <input id=\"firstName\" placeholder=\"First Name\" onChange={this.handleChange} value={firstName}></input>\r\n                    <input id=\"lastName\" placeholder=\"Last Name\" onChange={this.handleChange} value={lastName}></input>\r\n                    <button onClick={this.onSubmit}>Submit</button>\r\n                {/* </form> */}\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\n\r\nexport default class RegisterPage extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            firstName: \"\", \r\n            lastName: \"\"\r\n        }\r\n    }\r\n\r\n    handleChange = (event)=> {\r\n        this.setState({[event.target.id]: event.target.value})\r\n        console.log(this)\r\n    }\r\n\r\n    onSubmit = ()=> {\r\n        const { firstName, lastName } = this.state;\r\n        console.log(`Your first name is: ${firstName} and last name is: ${lastName}` );\r\n\r\n        this.props.onUserSubmit({firstName, lastName})\r\n    }\r\n\r\n    render() {\r\n        const { firstName, lastName } = this.state;\r\n        return(\r\n            <div>\r\n\r\n                <h1>Register</h1>\r\n                    <input id=\"firstName\" placeholder=\"First Name\" onChange={this.handleChange} value={firstName}></input>\r\n                    <input id=\"lastName\" placeholder=\"Last Name\" onChange={this.handleChange} value={lastName}></input>\r\n                    <button onClick={this.onSubmit}>Submit</button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}","import React from 'react';\r\n\r\nexport default class ButtonWithProps extends React.Component {\r\n    handleClick = (event) => {\r\n        this.props.informButtonPage(\"Button with Props was clicked\");\r\n    }\r\n\r\n    render() {\r\n        const { buttonText, customStyle } = this.props;\r\n\r\n        return (\r\n            <button onClick={this.handleClick} style={customStyle}>{buttonText ? buttonText : \"Submit\"}</button>\r\n            // <button className=\"btn pink\">{buttonText}</button>\r\n        );\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default class ButtonWithChild extends React.Component {\r\n    render() {\r\n        const { children, informButtonPage } = this.props;\r\n\r\n        return (\r\n            <button onClick={() => informButtonPage(\"Button with Child was clicked\")}>{children}</button>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ButtonWithProps from './ButtonWithProps';\r\nimport \"./ButtonPage.css\"\r\nimport ButtonWithChild from './ButtonWithChild';\r\n\r\nexport default class ButtonPage extends React.Component {\r\n  handleButtonClicks = (text) => {\r\n    console.log(text);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n        <div>\r\n            This is the button page.\r\n            <ButtonWithProps informButtonPage={this.handleButtonClicks} />\r\n            <ButtonWithProps buttonText=\"This is my custom button text\" customStyle={{backgroundColor: \"red\"}} informButtonPage={this.handleButtonClicks}/>\r\n            <ButtonWithProps buttonText=\"This is another button\" customStyle={{backgroundColor: \"blue\"}} informButtonPage={this.handleButtonClicks}/>\r\n\r\n            <ButtonWithChild informButtonPage={this.handleButtonClicks} >\r\n              This is a child\r\n            </ButtonWithChild>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ButtonWithProps from \"../button/ButtonWithProps\";\r\n\r\nexport default class ThemePage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            color: \"\"\r\n        }\r\n    }\r\n\r\n    submitColorChange = () => {\r\n        this.props.onColorChange(this.state.color);\r\n        this.props.history.push(\"/\");\r\n    }\r\n\r\n    render() {\r\n        console.log(this.props);\r\n\r\n        return (\r\n            <div>\r\n                <h1>Theme Page</h1>\r\n                <input type=\"color\" onChange={event => this.setState({color: event.target.value})}></input>\r\n                <ButtonWithProps informButtonPage={this.submitColorChange}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n","import React from 'react';\r\nimport { css } from '@emotion/core';\r\n// First way to import\r\n// import { ClipLoader } from 'react-spinners';\r\n// Another way to import. This is recommended to reduce bundle size\r\nimport ClipLoader from 'react-spinners/ClipLoader';\r\n \r\n// Can be a string as well. Need to ensure each key-value pair ends with ;\r\nconst override = css`\r\n    display: block;\r\n    margin: 0 auto;\r\n    border-color: red;\r\n`;\r\n \r\nexport default class AwesomeComponent extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      loading: this.props.loading\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <div className='sweet-loading'>\r\n        <ClipLoader\r\n          css={override}\r\n          sizeUnit={\"px\"}\r\n          size={150}\r\n          color={'#123abc'}\r\n          loading={this.state.loading}\r\n        />\r\n      </div> \r\n    )\r\n  }\r\n}","import React from 'react';\r\nimport ReactTable from 'react-table';\r\nimport 'react-table/react-table.css';\r\nimport AwesomeComponent from './AwesomeComponent';\r\n\r\nexport default class CitiesPage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            cities: [],\r\n            loading: true\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(\"https://indian-cities-api-nocbegfhqg.now.sh/cities\")\r\n        .then(response => response.json())\r\n        .then(cities => this.setState({'cities': cities})).then(this.setState({'loading': false}))\r\n    }\r\n\r\n    render() {\r\n        // const hardCodedCities = [this.state.cities]\r\n        //     {name: \"Copenhagen\", population: \"Few people\", size: \"small\"},\r\n        //     {name: \"Berlin\", population: \"Lotsa people\", size: \"medium\"},\r\n        //     {name: \"New York\", population: \"All the people\", size: \"medium\"}\r\n        // ]\r\n        return(\r\n            <div><h1>CITY</h1>\r\n                {/* <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>City name:</th>\r\n                            <th>State:</th>\r\n                            <th>District:</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.state.cities.map((city, index) => {\r\n                            return (\r\n                                <tr key={\"cityrow\" + index}>\r\n                                    <td>{city.City}</td>\r\n                                    <td>{city.State}</td>\r\n                                    <td>{city.District}</td>\r\n                                </tr>\r\n                            )\r\n                        })}\r\n                    </tbody>\r\n                </table> */}\r\n\r\n                <ReactTable\r\n                    columns = {[\r\n                        {\r\n                            Header: \"City name\",\r\n                            accessor: \"City\"\r\n                        },\r\n                        {\r\n                            \r\n                            Header: \"State\",\r\n                            accessor: \"State\"\r\n                        },\r\n                        {\r\n                            Header: \"District\",\r\n                            accessor: \"District\"\r\n                        }\r\n                    ]}\r\n                    data = {this.state.cities}\r\n                 />\r\n                 <AwesomeComponent loading={this.state.loading}/>\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport ProfilePage from './components/profile/ProfilePage'; \r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\nimport FormPage from './components/form/FormPage';\r\nimport RegisterPage from './components/register/RegisterPage';\r\nimport ButtonPage from './components/button/ButtonPage';\r\nimport ThemePage from './components/theme/ThemePage';\r\nimport CitiesPage from './components/cities/CitiesPage';\r\nimport {FaBeer} from 'react-icons/fa'\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      backgroundColor: \"\",\r\n      firstName: \"\",\r\n      lastName: \"\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // guaranteed that this gets called when app is rendered for the first time  \r\n    const color = localStorage.getItem('backgroundColor');\r\n    this.setState({backgroundColor: color ? color : \"#444\"})\r\n  }\r\n\r\n  handleColorChange = (color) => {\r\n    this.setState({backgroundColor: color});\r\n    localStorage.setItem('backgroundColor', color);\r\n  }\r\n  handleUserSubmit = ({ firstName, lastName}) => {\r\n    // console.log(user)\r\n    this.setState({firstName, lastName})\r\n  }\r\n\r\n  render() {\r\n    const { backgroundColor } = this.state;\r\n    const { firstName, lastName } = this.state;\r\n\r\n    return (\r\n      <Router>\r\n        <div className=\"entire-app\" style={{backgroundColor: backgroundColor}}>\r\n          <nav>\r\n            <ul>\r\n              <li>\r\n                <Link to=\"/\">Home</Link>\r\n              </li>\r\n              <li>\r\n                <Link to=\"/profile\">Profile</Link>\r\n              </li>\r\n              <li>\r\n                <Link to=\"/buttons\">Buttons</Link>\r\n              </li>\r\n              <li>\r\n                <Link to=\"/theme\">Theme</Link>\r\n              </li>\r\n              <li>\r\n                <Link to=\"/form\">Form</Link>\r\n              </li>\r\n              <li>\r\n                <Link to=\"/register\">Register</Link>\r\n              </li>\r\n              <li>\r\n                <Link to=\"/cities\">Cities</Link>\r\n              </li>\r\n            </ul>\r\n          </nav>\r\n\r\n          {/* A <Switch> looks through its children <Route>s and\r\n              renders the first one that matches the current URL. */}\r\n          <Switch>\r\n            <Route exact path=\"/\">\r\n\r\n              { firstName === \"\" && lastName === \"\" ? <div>Hello Stranger</div> : <div>Welcom back { firstName + \" \" + lastName }</div>}\r\n              <div><FaBeer className=\"fa-beer\"/></div>\r\n\r\n              {/* <div>\r\n                {this.state.firstName}\r\n                \r\n                This is the home page\r\n              </div> */}\r\n            </Route>\r\n            <Route exact path=\"/profile\" component={ProfilePage} />\r\n            <Route exact path=\"/buttons\" component={ButtonPage} />\r\n            <Route exact path=\"/form\" component={FormPage} />\r\n            <Route exact path=\"/cities\" component={CitiesPage} />\r\n            <Route exact path=\"/register\" component={(props) => <RegisterPage {...props} onUserSubmit={this.handleUserSubmit} />} />\r\n            <Route exact path=\"/theme\" component={(props) => <ThemePage /> } /> \r\n      \r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}